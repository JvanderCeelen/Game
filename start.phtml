<!doctype html>

<html>
<head>
    <meta charset="utf-8">
    <link rel="stylesheet/less" href="source/less/style.less">
    <script async type="text/javascript" src="source/js/less.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
</head>
<body class="game">
    <header>
        <p>
            You encounter a monster. What do you do?
        </p>

        <div class="character-info-wrapper">
            <div class="character-info info-hero">
                <span class="character-name"></span>
                <div class="character-stats">
                    <div class="healthbar healthbar-hero">
                        <div class="healthbar-outer">
                            <div class="healthbar-inner" data-hp="">
                            </div>
                        </div>
                    </div>
                    <div class="level hero-level">
                        <span></span>
                    </div>
                    <div class="exp-bar-outer">
                        <div class="exp-bar-inner">
                        </div>
                    </div>
                </div>
            </div>

            <div class="character-info info-monster">
                <span class="character-name"></span>
                <div class="character-stats">
                    <div class="healthbar healthbar-monster">
                        <div class="healthbar-outer">
                            <div class="healthbar-inner" data-hp="">
                            </div>
                        </div>
                    </div>
                    <div class="level monster-level">
                        <span></span>
                    </div>
                </div>
            </div>
        </div>
    </header>

    <div class="console-window">
        <div class="console-window__content">

        </div>
    </div>

    <input id="console-input" type="text" autofocus />
</body>

<script>
    players = {

        hero: {
            'crit'  : 15,
            'dodge' : 5,
            'exp'   : 50,
            'hp'    : 100,
            'level' : 1,
            'name'  : 'Dani',
        },
    }

    monsters = {

        kobold: {
            'crit'  : 15,
            'desc'  : 'This is a kobold. It does not look particularly fearsome.',
            'dodge' : 5,
            'exp'   : 100,
            'hp'    : 50,
            'level' : 1,
            'name'  : 'kobold',
        },

        orc: {
            'crit'  : 15,
            'desc'  : 'This is a bloodthirsty orc. Better watch it.',
            'dodge' : 5,
            'exp'   : 200,
            'hp'    : 100,
            'level' : 1,
            'name'  : 'orc',
        },
    }

    game = {
        heroCritChance: 15,
        monsterCritChance: 15,
        hero: players.hero,

        init: function() {
            game.attachHandlers();
            game.updateCharacterInfo(game.hero);
        },

        attachHandlers: function() {
            $('#console-input').on('keyup', function(event) {
                if (event.keyCode == 13) {
                    game.handleInput();
                    $(event.target).val('');
                }
            });
        },

        handleInput: function() {
            var target = $('#console-input').val();

            switch (target) {
                // attack
                case (target.match(/(attack )\w/) || {}).input:
                    target = target.replace('attack ', '');
                    game.getAttackTarget(target);
                    break;
                // inspect
                case (target.match(/(inspect )\w/) || {}).input:
                    target = target.replace('inspect ', '');
                    game.inspectCharact(target);
                    break;
                // flee
                case 'flee':
                    game.handleFlee();
                    break;
                // look
                case (target.match(/(look )\w/) || {}).input:
                    target = target.replace('look ', '');
                    game.handleLook(target);
                    break;
                case (target.match(/(target )\w/) || {}).input:
                    target = target.replace('target ', '');
                    game.targetCharacter(target);
                    break;
                default:
                    game.printToConsole('Excuse me?');
                    break;
            }
        },

        printToConsole: function(message) {
            $('.console-window__content').append('<p>' + message + '</p>');

            $('.console-window').scrollTop(
                $('.console-window__content p:last-child').position().top
            );
        },

        inspectCharact: function(target) {
            for (var monster in monsters) {
                if (monster == target) {
                    game.printToConsole(
                        'This is a(n) level <strong>' + monsters[monster].level + ' ' + monsters[monster].name + '</strong>. ' +
                        'It has <strong>' + monsters[monster].hp + '</strong> hitpoints.'
                    );

                    return;
                }
            }
            game.printToConsole('No-one by the name of ' + monster + ' can be targeted.');
        },

        targetCharacter: function(target) {
            for (var monster in monsters) {
                if (monster == target) {
                    game.updateCharacterInfo(monsters[monster]);
                    return;
                }
            }
        },

        /**
         * Loops over the monsters object and checks if the attacked target is
         * one of those monsters. If so, the handle attack function is called. If
         * not a message is printed that there's no such monster.
         * @return undefined
         */
        getAttackTarget: function(target) {
            for (var monster in monsters) {
                if (monster == target) {
                    game.handleAttack(monsters[monster]);
                    return;
                }
            }
            game.printToConsole('No-one by the name of ' + monster + ' is around!');
        },

        handleAttack: function(monster) {
            game.printToConsole('You attack the ' + monster.name + '.');
            game.updateCharacterInfo(monster);
            game.attackLoop(monster);
        },

        attackLoop: function(monster) {
            game.attack(monster);

            setTimeout(function() {
                if (monster.hp > 0 && players.hero.hp > 0)
                    game.attackLoop(monster);
            }, 1000);
        },

        attack: function(monster) {
            if (game.hit(monster)) {
                var damage = game.calculateDamage(monster);
                var hitMessage = 'You <em>' + (damage['crit'] > 1 ? 'CRIT' : 'hit') + '</em> the ' + monster.name + ' for ' + damage['damage'] + ' damage.';
                game.calculateHP(damage['damage'], monster);

                if (monster.hp <= 0) {
                    game.handleDeath(monster);
                    return;
                }

                game.printToConsole(hitMessage)
            } else {
                var hitMessage = 'Your attack misses!'
                game.printToConsole(hitMessage);
            }

            if (game.hit(game.hero)) {
                var damage = game.calculateDamage(game.hero);
                var hitMessage = 'The ' + monster.name + ' <em>' + (damage['crit'] > 1 ? 'CRITS' : 'hits') + '</em> you for ' + damage['damage'] + ' damage.';
                game.calculateHP(damage['damage'], game.hero);

                if (players.hero.hp <= 0) {
                    game.handleDeath(game.hero);
                    return;
                }

                game.printToConsole(hitMessage)
            } else {
                var hitMessage = 'The monster attack misses!'
                game.printToConsole(hitMessage);
            }
        },

        hit: function(target) {
            var dodge = 0;

            if (target == game.hero) {
                dodge = game.hero.dodge;
            } else {
                dodge = target.dodge;
            }

            var number = game.generateRandomNumber();
            return number <= dodge ? false : true;
        },

        calculateDamage: function(target) {
            var multiplier = game.calculateCritMultiplier(target);
            return {
                damage: (Math.floor(Math.random() * 6) + 4) * multiplier,
                crit: multiplier,
            };
        },

        calculateCritMultiplier: function(person) {
            var random = game.generateRandomNumber();
            var critChance;

            if (person == game.hero) {
                critChance = game.heroCritChance;
            } else if (person == 'monster') {
                critChance = game.monsterCritChance;
            }

            return random <= critChance ? 2 : 1;
        },

        calculateHP: function(damage, target) {
            target.hp -= damage;

            if (target.hp < 0)
                target.hp = 0;

            if (target == game.hero) {
                var HPbar = '.healthbar-hero .healthbar-inner';
            } else {
                var HPbar = '.healthbar-monster .healthbar-inner';
            }

            var totalHP = $(HPbar).data('hp');

            $(HPbar).html(target.hp).width($(HPbar).width() - (damage / totalHP) * 100);
        },

        updateCharacterInfo: function(target) {
            if (target === game.hero) {
                $('.character-name', '.info-hero').text(players.hero.name + ':');
                $('.healthbar-hero .healthbar-inner').text(players.hero.hp).data('hp', players.hero.hp);;
                $('.hero-level span').text(players.hero.level);
                $('.levelbar-inner', '.info-hero ').width(players.hero.exp);
            } else {
                $('.info-monster').css('opacity', 1);
                $('.character-name', '.info-monster').text(target.name + ':');
                $('.healthbar-monster .healthbar-inner').text(target.hp).data('hp', target.hp);;
                $('.monster-level span').text(target.level);
            }
        },

        generateRandomNumber: function(range) {
            var range = range || 100;
            return Math.floor(Math.random() * range) + 1;
        },

        handleLook: function(target) {
            if (target === undefined) {
                game.printToConsole('You look around you.');
                return;
            }

            for (var monster in monsters) {
                if (monster == target) {
                    game.printToConsole(monsters[monster].desc);
                    return;
                }
            }
        },

        handleFlee: function() {
            game.printToConsole('Oh c\'mon. REALLY?');
        },

        handleDeath:function(target) {
            if (target == game.hero) {
                game.printToConsole('<p class="result">You have died. No exp for you. Are you sure this is the right game for you?');
            } else {
                game.printToConsole('<p class="result">The ' + target.name + ' is dead. You killed it. It turned out to be a really friendly monster. Are you happy?')
            }
        }
    }

game.init();
</script>
</html>
