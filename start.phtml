<!doctype html>

<html>
<head>
    <meta charset="utf-8">
    <link rel="stylesheet/less" href="source/less/style.less">
    <script async type="text/javascript" src="source/js/less.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
</head>
<body>
<p>
    You encounter a monster. What do you do?
</p>

<div class="healthbar hero">
    Hero:
    <div class="healthbar-outer">
        <div class="healthbar-inner" data-hp="100">
            100
        </div>
    </div>
</div>

<div class="healthbar monster">
    <div class="healthbar-outer">
        <div class="healthbar-inner" data-hp="">
        </div>
    </div>
</div>

<div class="console-window">

</div>

<input id="console-input" type="text" />

<script>
    game = {
        heroHP: $('.hero .healthbar-inner').html(),
        monsterHP: 0,
        heroCritChance: 15,
        monsterCritChance: 15,

        init: function() {
            game.attachHandlers();
        },

        attachHandlers: function() {
            $('#console-input').on('keyup', function(event) {
                if (event.keyCode == 13) {
                    game.handleInput();
                    $(event.target).val('');
                }
            });
        },

        handleInput: function() {
            var target = $('#console-input').val();

            switch (target) {
                case (target.match(/(attack )\w/) || {}).input:
                    target = target.replace('attack ', '');
                    game.searchTarget(target);
                    break;
                case 'flee':
                    game.handleFlee();
                    break;
                case 'look':
                    game.handleLook();
                    break;
                default:
                    game.printToConsole('Excuse me?');
                    break;
            }
        },

        printToConsole: function(message) {
            $('.console-window').append('<p>' + message + '</p>');

            $('.console-window').scrollTop(
                $('.console-window p:last-child').position().top
            );
        },

        searchTarget: function(target) {
            for (var monster in monsters) {
                if (monster == target) {
                    game.handleAttack(monsters[monster]);
                }
            }

            // game.printToConsole('No-one by the name of ' + monster + ' is around!');
        },

        handleAttack: function(monster) {
            game.printToConsole('You attack the ' + monster.name + '.');
            game.setMonsterInfo(monster);
            game.attackLoop(monster);
        },

        attackLoop: function(monster) {
            game.attack(monster);

            setTimeout(function() {
                if (game.monsterHP > 0 && game.heroHP > 0){
                    game.attackLoop(monster);
                }
            }, 1000);
        },

        attack: function(monster) {
            if (game.hit(monster)) {
                var heroDamage = game.calculateHeroDamage();
                var heroHitMessage = 'You <em>' + (heroDamage['crit'] > 1 ? 'CRIT' : 'hit') + '</em> the ' + monster.name + ' for ' + heroDamage['damage'] + ' damage.';
                game.calculateMonsterHP(heroDamage['damage']);
                game.printToConsole(heroHitMessage);
            } else {
                var heroHitMessage = 'Your attack misses!'
                game.printToConsole(heroHitMessage);
            }

            if (game.hit('hero')) {
                var monsterDamage = game.calculateMonsterDamage();
                var monsterHitMessage = 'The ' + monster.name + ' <em>' + (monsterDamage['crit'] > 1 ? 'CRITS' : 'hits') + '</em> you for ' + monsterDamage['damage'] + ' damage.';
                game.calculateHeroHP(monsterDamage['damage']);
                game.printToConsole(monsterHitMessage);
            } else {
                var monsterHitMessage = 'The monster attack misses!'
                game.printToConsole(monsterHitMessage);
            }

            // Echo monster death message
            if (game.monsterHP <= 0) {
                game.printToConsole('<p class="result">The ' + monster.name + ' is dead. You killed it. It turned out to be a really friendly monster. Are you happy?')
            }

            if (game.heroHP <= 0) {
                gamme.printToConsole('<p class="result">You have died. No exp for you. Are you sure this is the right game for you?');
            }
        },

        hit: function(person) {
            var dodge = 0;

            if (person == 'hero') {
                dodge = players.hero.dodge;
            } else {
                dodge = person.dodge;
            }

            var number = game.generateRandomNumber();
            return number <= dodge ? false : true;;
        },

        calculateHeroDamage: function() {
            var multiplier = game.calculateCritMultiplier('hero');
            return {
                damage: (Math.floor(Math.random() * 6) + 4) * multiplier,
                crit: multiplier,
            };
        },

        calculateMonsterDamage: function() {
            var multiplier = game.calculateCritMultiplier('monster');
            return {
                damage: (Math.floor(Math.random() * 4) + 1) * multiplier,
                crit: multiplier,
            }
        },

        calculateCritMultiplier: function(person) {
            var random = game.generateRandomNumber();

            if (person == 'hero') {
                critChance = game.heroCritChance;
            } else if (person == 'monster') {
                critChance = game.monsterCritChance;
            }

            return random <= critChance ? 2 : 1;
        },

        calculateMonsterHP: function(heroDamage) {
            game.monsterHP -= heroDamage;

            if (game.monsterHP < 0)
                game.monsterHP = 0;


            var HPbar = '.monster .healthbar-inner';
            var totalHP = $(HPbar).data('hp');

            $(HPbar).html(game.monsterHP).width($(HPbar).width() - (heroDamage / totalHP) * 100);
        },

        calculateHeroHP: function(monsterDamage) {
            game.heroHP -= monsterDamage;

            if (game.heroHP < 0)
                game.heroHP = 0;

            var HPbar = '.hero .healthbar-inner';
            var totalHP = $(HPbar).data('hp');

            $(HPbar).html(game.heroHP).width($(HPbar).width() - ((monsterDamage / totalHP) * 100));
        },

        setMonsterInfo: function(monster) {
            game.monsterHP = monster.hp;
            $('.healthbar.monster').prepend(monster.name + ':');
            $('.monster .healthbar-inner').html(monster.hp).data('hp', monster.hp);;
        },

        generateRandomNumber: function(range) {
            var range = range || 100;
            return Math.floor(Math.random() * range) + 1;
        },

        handleLook: function() {
            game.printToConsole('');
        },

        handleFlee: function() {
            game.printToConsole('Oh c\'mon. REALLY?');
        },
    }
    game.init();

    players = {

        hero: {
            'dodge': 5
        },
    }

    monsters = {

        kobold: {
            'name' : 'kobold',
            'hp'   : 50,
            'dodge': 5,
            'exp'  : 100,
        },

        orc: {
            'name' : 'orc',
            'hp'   : 100,
            'dodge': 5,
            'exp'  : 200,
        },
    }
</script>
</body>
</html>
